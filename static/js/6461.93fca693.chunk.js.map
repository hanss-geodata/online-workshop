{"version":3,"file":"static/js/6461.93fca693.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.25/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import{isSome as r,unwrap as e}from\"../../core/maybe.js\";import t from\"../../geometry/support/GeographicTransformation.js\";import s from\"./PixelBlock.js\";import{decode as o}from\"./rasterFormats/RasterCodec.js\";import{split as i,mosaic as a,approximateTransform as n,getLocalArithmeticNorthRotations as m}from\"./rasterFunctions/pixelUtils.js\";import{create as l}from\"./rasterFunctions/rasterFunctionHelper.js\";import{requirePE as c,load as f,getProjectionOffsetGrid as p}from\"./rasterFunctions/rasterProjectionHelper.js\";import{estimateStatisticsHistograms as u}from\"./rasterFunctions/stretchUtils.js\";import{convertVectorFieldData as d,convertToLocalDirections as S}from\"./rasterFunctions/vectorFieldUtils.js\";import{readTransform as y}from\"./rasterTransforms/utils.js\";import h from\"../../renderers/support/RasterSymbolizer.js\";import{createFlowMesh as x}from\"../../views/2d/engine/flow/dataUtils.js\";import O from\"../../geometry/Extent.js\";class N{convertVectorFieldData(e){const t=s.fromJSON(e.pixelBlock),o=d(t,e.type);return Promise.resolve(r(o)&&o.toJSON())}async decode(r){const e=await o(r.data,r.options);return e&&e.toJSON()}symbolize(e){e.pixelBlock=s.fromJSON(e.pixelBlock),e.extent=e.extent?O.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(r(t)&&t.toJSON())}async updateSymbolizer(r){this.symbolizer=h.fromJSON(r.symbolizerJSON),r.histograms&&\"rasterStretch\"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}async updateRasterFunction(r){this.rasterFunction=l(r.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:O.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map((e=>r(e)?s.fromJSON(e):null)),primaryRasterIds:e.primaryRasterIds});return r(t)?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(s.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r(t)&&t.toJSON())}estimateStatisticsHistograms(r){const e=u(s.fromJSON(r.srcPixelBlock));return Promise.resolve(e)}split(r){const e=i(s.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return e&&e.forEach(((r,t)=>{e.set(t,r?.toJSON())})),Promise.resolve(e)}async mosaicAndTransform(r){const t=r.srcPixelBlocks.map((r=>r?new s(r):null)),o=a(t,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let i,l=o;return r.coefs&&(l=n(o,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(i=m(r.destDimension,r.gcsGrid),l=e(S(l,r.isUV?\"vector-uv\":\"vector-magdir\",i))),{pixelBlock:l?.toJSON(),localNorthDirections:i}}async createFlowMesh(r,e){const t={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:s,indexData:o}=await x(r.meshType,r.simulationSettings,t,e.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(r){const e=O.fromJSON(r.projectedExtent),s=O.fromJSON(r.srcBufferExtent);let o=null;r.datumTransformationSteps&&(o=new t({steps:r.datumTransformationSteps})),(r.includeGCSGrid||c(e.spatialReference,s.spatialReference,o))&&await f();const i=r.rasterTransform?y(r.rasterTransform):null;return p({...r,projectedExtent:e,srcBufferExtent:s,datumTransformation:o,rasterTransform:i})}}export{N as default};\n"],"names":["N","convertVectorFieldData","e","t","s","pixelBlock","o","d","type","Promise","resolve","r","toJSON","async","data","options","symbolize","extent","O","this","symbolizer","h","symbolizerJSON","histograms","rendererJSON","rasterFunction","l","rasterFunctionJSON","process","primaryPixelBlocks","map","primaryRasterIds","stretch","simpleStretch","srcPixelBlock","stretchParams","estimateStatisticsHistograms","u","split","i","tileSize","maximumPyramidLevel","forEach","set","srcPixelBlocks","a","srcMosaicSize","blockWidths","alignmentInfo","clipOffset","clipSize","coefs","n","destDimension","sampleSpacing","interpolation","projectDirections","gcsGrid","m","S","isUV","localNorthDirections","Float32Array","flowData","buffer","mask","Uint8Array","maskBuffer","width","height","vertexData","indexData","x","meshType","simulationSettings","signal","result","vertexBuffer","indexBuffer","transferList","projectedExtent","srcBufferExtent","datumTransformationSteps","steps","includeGCSGrid","c","spatialReference","f","rasterTransform","y","p","datumTransformation"],"sourceRoot":""}